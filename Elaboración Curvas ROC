##############################################################
###### Evaluación de clasificación mediante curvas ROC #######      
#########################   ROCR   ###########################
########### Clasificación taxonómica usando Kraken2 ##########
##############################################################


#Código a usar en R.


# Cargar las librerías necesarias para ser usadas en el código, estas son ROCR, que permite la graficación de las curvas ROC y readxl, que permite leer hojas de cálculo propias de excel en R.
library(ROCR)
library(readxl)


#Establecer dataframe a través de un archivo excel en el que se han ido organizando todas las condiciones extraídas de Bracken. Se lee la hoja de cálculo gracias al paquete readxl.
df <- read_excel("localizacion/archivo/excel/nombrearchivoexcel.xlsx")  


# Crear un gráfico vacío de información al que más tarde se rellenará con distintos parámetros. Aquí se establece el título, los títulos de los ejes, límites inferiores y superiores...
plot(0, 0, type = "n", xlim = c(0, 1), ylim = c(0, 1), xlab = "False Positive Rate", ylab = "True Positive Rate", 
     main = "Curva ROC x especies")

# Definir colores a usar en las curvas y la leyenda, se intentan elegir colores con suficiente diferencia cromática entre ellos para facilitar la observación.
colores <- c("red", "blue", "green", "hotpink1", "purple", "orange", "grey", "olivedrab1", "turquoise2", "gray42")


# Función para agregar predicciones y performance, inicializando ROCR en sí y permitiendo la graficación.
agregar_curva <- function(predicciones, color) {
    perf <- performance(predicciones, "tpr", "fpr")
    plot(perf, col = color, add = TRUE)
    auc_ROCR <- performance(predicciones, measure = "auc")
    return(round(auc_ROCR@y.values[[1]], 2))
}


# Lista de predicciones, en primer lugar se convierte la columna del dataframe que determina el porcentaje en un vector, más tarde se hace lo mismo sobre la columna que determina con valores de 1 o 0 si el dato pertenece a la serie control o a la muestra.
# na.omit determina que los valores no válidos o no legibles por R se omitan.
predicciones <- list(
    prediction(as.vector(na.omit(df$b0confidence10threshold)), as.vector(na.omit(df$label0c10t))),
    prediction(as.vector(na.omit(df$b0confidence100threshold)), as.vector(na.omit(df$label0c100t))),
    prediction(as.vector(na.omit(df$b01confidence10threshold)), as.vector(na.omit(df$label01c10t))),
    prediction(as.vector(na.omit(df$b025confidence10threshold)), as.vector(na.omit(df$label025c10t))),
    prediction(as.vector(na.omit(df$b025confidence100threshold)), as.vector(na.omit(df$labelc025t100))),
    prediction(as.vector(na.omit(df$b05confidence10threshold)), as.vector(na.omit(df$label05c10t))),
    prediction(as.vector(na.omit(df$b05confidence100threshold)), as.vector(na.omit(df$labelc05t100)))
    
    
)
#Lista de etiquetas o nombres para distinguir a los distintas series de datos a clasificar.

etiquetas_base <- c("c0 thres 10", "c0 thres 100", "c01 thres 10", "c025 thres 10", "c025 thres 100","c05 thres 10", "c05 thres 100"  )


# Calcular y agregar AUC a las etiquetas, el AUC es calculado automáticamente por el paquete ROCR.
etiquetas <- sapply(1:length(predicciones), function(i) {
    auc <- agregar_curva(predicciones[[i]], colores[i])
    paste(etiquetas_base[i], ":", auc)
})


# Agregar la leyenda con AUC, esta leyenda contiene la lista creada antes con el nombre "etiquetas", se puede modificar su posición en el texto además de tamaño de letra y colores.
legend("bottomright", legend = etiquetas, col = colores, lty = 1, cex = 0.5, ncol = 1, bty = "n")
